// DO NOT EDIT: generated by github.com/tim-online/go-afas-profit-rest/generate

package afas

import "encoding/json"

type {{.Name}}DeleteRequest struct {
	{{.Name}}Service
	ConnectorDeleteRequest
}

type {{.Name}}DeleteResponseBody struct {
	ConnectorDeleteResponseBody

	Rows []{{.Name}} `json:"rows"`
}

type {{.Name}}DeleteRequestBody struct {
    {{.Name}} `json:"{{.Name}}"`
}

// Wrap extra object around root type:
// {
//   "root": {}
// }
func ({{.Variable}} {{.Name}}DeleteRequestBody) MarshalJSON() ([]byte, error) {
	type alias {{.Name}}DeleteRequestBody
	wrapper := struct {
		{{.Name}}DeleteRequestBody alias `json:"{{.Name}}"`
	}{ {{.Name}}DeleteRequestBody: alias({{.Variable}})}
	return json.Marshal(wrapper)
}

func (r *{{.Name}}DeleteRequest) RequestBody() *{{.Name}}DeleteRequestBody {
	if body, ok := r.ConnectorDeleteRequest.RequestBody().(*{{.Name}}DeleteRequestBody); ok {
		return body
	}

	body := &{{.Name}}DeleteRequestBody{}
	r.ConnectorDeleteRequest.SetRequestBody(body)
	return body
}

// func (r *{{.Name}}DeleteRequest) ResponseBody() *{{.Name}}DeleteResponseBody {
// 	rb := r.ConnectorDeleteRequest.ResponseBody()
// 	rows := rb.Rows.(*[]{{.Name}})
// 	return &{{.Name}}DeleteResponseBody{
// 		ConnectorDeleteResponseBody: *rb,
// 		Rows: *rows,
// 	}
// }

func (s *{{.Name}}Service) NewDeleteRequest() {{.Name}}DeleteRequest {
	r := s.api.Connector.NewDeleteRequest()
	r.URLParams().ConnectorID = "{{.Name}}"
	return {{.Name}}DeleteRequest{ConnectorDeleteRequest: r}
}

// vim: ft=gotexttmpl noet
