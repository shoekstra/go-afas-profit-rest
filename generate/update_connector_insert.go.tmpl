// DO NOT EDIT: generated by github.com/tim-online/go-afas-profit-rest/generate

package afas

import "encoding/json"

type {{.Name}}InsertRequest struct {
	{{.Name}}Service
	ConnectorInsertRequest
}

type {{.Name}}InsertResponseBody struct {
	*ConnectorInsertResponseBody

	UniID string `json:"Unid"`
	EnNo  string `json:"EnNo"`
}

// wraps the root object of the request
type {{.Name}}InsertRequestBody struct {
    {{.Name}}
}

func ({{.Variable}} *{{.Name}}InsertRequest) ResponseBody() *{{.Name}}InsertResponseBody {
	type alias {{.Name}}InsertResponseBody

	rb := {{.Name}}InsertResponseBody{
		ConnectorInsertResponseBody: {{.Variable}}.ConnectorInsertRequest.ResponseBody(),
	}

	wrapper := struct {
		{{.Name}}InsertResponseBody alias `json:"{{.Name}}"`
	}{
		{{.Name}}InsertResponseBody: alias(rb),
	}

	json.Unmarshal({{.Variable}}.ConnectorInsertRequest.ResponseBody().Results, &wrapper)
	rb = {{.Name}}InsertResponseBody(wrapper.{{.Name}}InsertResponseBody)
	return &rb
}

// Wrap extra object around root type:
// {
//   "{{.Name}}": {}
// }
func ({{.Variable}} {{.Name}}InsertRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		{{.Name}} {{.Name}} `json:"{{.Name}}"`
	}{ {{.Variable}}.{{.Name}} })
}

func (r *{{.Name}}InsertRequest) RequestBody() *{{.Name}}InsertRequestBody {
	// convert ConnectorInsertRequest interface to real type
	body, _ := r.ConnectorInsertRequest.RequestBody().(*{{.Name}}InsertRequestBody)
	return body
}

func (s *{{.Name}}Service) NewInsertRequest() {{.Name}}InsertRequest {
	r := s.api.Connector.NewInsertRequest()

	// set custom request body on creation
	r.SetRequestBody(&{{.Name}}InsertRequestBody{})

	r.URLParams().ConnectorID = "{{.ID}}"
	return {{.Name}}InsertRequest{ConnectorInsertRequest: r}
}

// vim: ft=gotexttmpl
