// DO NOT EDIT: generated by github.com/tim-online/go-afas-profit-rest/generate

package afas

import (
	"encoding/json"
	"time"

	"github.com/cockroachdb/apd"
)

{{range .}}

// {{.Comment}}
type {{.Name}} struct {
    {{range .Fields}} {{.Name}} {{.Type}} {{if .Tags}}`{{.Tags}}`{{end}} // {{.Comment}}
    {{end}}
}

func ({{.Variable}} {{.Name}}) MarshalJSON() ([]byte, error) {
	type alias {{.Name}}

	// type to json
	b, err := json.Marshal(alias({{.Variable}}))
	if err != nil {
		return b, err
	}

	// json to map with preservation of json struct tags
	m := map[string]interface{}{}
	json.Unmarshal(b, &m)

	jsonFields := {{.Variable}}.JSONFields()
	fields := map[string]interface{}{}
	jsonObjects := {{.Variable}}.JSONObjects()
	objects := map[string]interface{}{}
	for k, v := range m {
		for _, f := range jsonFields {
			if k == f {
				// value is a field
				fields[k] = v
			}
		}

		for _, f := range jsonObjects {
			if k == f {
				// value is an object
				objects[k] = v
			}
		}
	}

	requestBody := map[string]interface{}{
		"{{.Name}}": map[string]interface{}{
			"Element": map[string]interface{}{
				"@DbId":   {{.Variable}}.DBID(),
				"Fields":  fields,
				"Objects": objects,
			},
		},
	}

	return json.Marshal(requestBody)
}

{{if .DBIDField}}
func (k {{.Name}}) DBIDField() string {
	return "{{.DBIDField}}"
}

func (k {{.Name}}) DBID() string {
	return {{.Variable}}.{{.DBIDField}}
}
{{end}}

func (k {{.Name}}) JSONFields() []string {
	return []string{
        {{range .Fields}}"{{.JSONName}}",
        {{end}}
	}
}

func (k {{.Name}}) JSONObjects() []string {
	return []string{
        {{range .Objects}}"{{.}}",
        {{end}}
	}
}
{{end}}

// vim: ft=gotexttmpl
