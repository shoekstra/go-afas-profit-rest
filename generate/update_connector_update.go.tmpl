// DO NOT EDIT: generated by github.com/tim-online/go-afas-profit-rest/generate

package afas

import "encoding/json"

type {{.Name}}UpdateRequest struct {
	{{.Name}}Service
	ConnectorUpdateRequest
}

type {{.Name}}UpdateResponseBody struct {
	ConnectorUpdateResponseBody
}

type {{.Name}}UpdateRequestBody struct {
    {{.Name}} `json:"{{.Name}}"`
}

// Wrap extra object around root type:
// {
//   "root": {}
// }
func ({{.Variable}} {{.Name}}UpdateRequestBody) MarshalJSON() ([]byte, error) {
	type alias {{.Name}}UpdateRequestBody
	wrapper := struct {
		{{.Name}}UpdateRequestBody alias `json:"{{.Name}}"`
	}{ {{.Name}}UpdateRequestBody: alias({{.Variable}})}
	return json.Marshal(wrapper)
}

func (r *{{.Name}}UpdateRequest) RequestBody() *{{.Name}}UpdateRequestBody {
	if body, ok := r.ConnectorUpdateRequest.RequestBody().(*{{.Name}}UpdateRequestBody); ok {
		return body
	}

	body := &{{.Name}}UpdateRequestBody{}
	r.ConnectorUpdateRequest.SetRequestBody(body)
	return body
}

func (s *{{.Name}}Service) NewUpdateRequest() {{.Name}}UpdateRequest {
	r := s.api.Connector.NewUpdateRequest()
	r.URLParams().ConnectorID = "{{.Name}}"
    r.SetRequestBody(&{{.Name}}UpdateRequestBody{})
	return {{.Name}}UpdateRequest{ConnectorUpdateRequest: r}
}

// vim: ft=gotexttmpl noet
