// DO NOT EDIT: generated by github.com/tim-online/go-afas-profit-rest/generate

package afas

import "encoding/json"

type KnSalesRelationOrgInsertRequest struct {
	KnSalesRelationOrgService
	ConnectorInsertRequest
}

type KnSalesRelationOrgInsertResponseBody struct {
	*ConnectorInsertResponseBody

	UniID string `json:"Unid"`
	EnNo  string `json:"EnNo"`
}

type KnSalesRelationOrgInsertRequestBody struct {
	KnSalesRelationOrg `json:"KnSalesRelationOrg"`
}

func (k *KnSalesRelationOrgInsertRequest) ResponseBody() *KnSalesRelationOrgInsertResponseBody {
	type alias KnSalesRelationOrgInsertResponseBody

	rb := KnSalesRelationOrgInsertResponseBody{
		ConnectorInsertResponseBody: k.ConnectorInsertRequest.ResponseBody(),
	}

	wrapper := struct {
		KnSalesRelationOrgInsertResponseBody alias `json:"KnSalesRelationOrg"`
	}{
		KnSalesRelationOrgInsertResponseBody: alias(rb),
	}

	json.Unmarshal(k.ConnectorInsertRequest.ResponseBody().Results, &wrapper)
	rb = KnSalesRelationOrgInsertResponseBody(wrapper.KnSalesRelationOrgInsertResponseBody)
	return &rb
}

// Wrap extra object around root type:
// {
//   "root": {}
// }
func (k KnSalesRelationOrgInsertRequestBody) MarshalJSON() ([]byte, error) {
	type alias KnSalesRelationOrgInsertRequestBody
	wrapper := struct {
		KnSalesRelationOrgInsertRequestBody alias `json:"KnSalesRelationOrg"`
	}{KnSalesRelationOrgInsertRequestBody: alias(k)}
	return json.Marshal(wrapper)
}

func (r *KnSalesRelationOrgInsertRequest) RequestBody() *KnSalesRelationOrgInsertRequestBody {
	if body, ok := r.ConnectorInsertRequest.RequestBody().(*KnSalesRelationOrgInsertRequestBody); ok {
		return body
	}

	body := &KnSalesRelationOrgInsertRequestBody{}
	r.ConnectorInsertRequest.SetRequestBody(body)
	return body
}

func (s *KnSalesRelationOrgService) NewInsertRequest() KnSalesRelationOrgInsertRequest {
	r := s.api.Connector.NewInsertRequest()
	r.URLParams().ConnectorID = "KnSalesRelationOrg"
	return KnSalesRelationOrgInsertRequest{ConnectorInsertRequest: r}
}
