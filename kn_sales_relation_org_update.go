// DO NOT EDIT: generated by github.com/tim-online/go-afas-profit-rest/generate

package afas

import "encoding/json"

type KnSalesRelationOrgUpdateRequest struct {
	KnSalesRelationOrgService
	ConnectorUpdateRequest
}

type KnSalesRelationOrgUpdateResponseBody struct {
	ConnectorUpdateResponseBody

	Rows []KnSalesRelationOrg `json:"rows"`
}

type KnSalesRelationOrgUpdateRequestBody struct {
	KnSalesRelationOrg `json:"KnSalesRelationOrg"`
}

// Wrap extra object around root type:
// {
//   "root": {}
// }
func (k KnSalesRelationOrgUpdateRequestBody) MarshalJSON() ([]byte, error) {
	type alias KnSalesRelationOrgUpdateRequestBody
	wrapper := struct {
		KnSalesRelationOrgUpdateRequestBody alias `json:"KnSalesRelationOrg"`
	}{KnSalesRelationOrgUpdateRequestBody: alias(k)}
	return json.Marshal(wrapper)
}

func (r *KnSalesRelationOrgUpdateRequest) RequestBody() *KnSalesRelationOrgUpdateRequestBody {
	if body, ok := r.ConnectorUpdateRequest.RequestBody().(*KnSalesRelationOrgUpdateRequestBody); ok {
		return body
	}

	body := &KnSalesRelationOrgUpdateRequestBody{}
	r.ConnectorUpdateRequest.SetRequestBody(body)
	return body
}

// func (r *KnSalesRelationOrgUpdateRequest) ResponseBody() *KnSalesRelationOrgUpdateResponseBody {
// 	rb := r.ConnectorUpdateRequest.ResponseBody()
// 	rows := rb.Rows.(*[]KnSalesRelationOrg)
// 	return &KnSalesRelationOrgUpdateResponseBody{
// 		ConnectorUpdateResponseBody: *rb,
// 		Rows: *rows,
// 	}
// }

func (s *KnSalesRelationOrgService) NewUpdateRequest() KnSalesRelationOrgUpdateRequest {
	r := s.api.Connector.NewUpdateRequest()
	r.URLParams().ConnectorID = "KnSalesRelationOrg"
	return KnSalesRelationOrgUpdateRequest{ConnectorUpdateRequest: r}
}
